#!/usr/bin/swipl -L0 -G0 -T0 -p library=. -q -g main -t halt -s

:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_util')).
:- use_module(library('thea2/swrl_rdf_hooks')).
:- use_module(library('thea2/swrl')).
:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_catalog')).

main :-
        current_prolog_flag(argv, Arguments),
        append(_SytemArgs, [--|Args], Arguments), !,
        set_prolog_flag(verbose,normal),
        parse_args(Args,Opts),
        findall(X,
                member(loadopt(X),Opts),
                LoadOpts),
        (   member(format(Fmt),LoadOpts)
        ->  true
        ;   true),
        forall(member(ensure_loaded(M),Opts),
               ensure_loaded(M)),
        forall(member(settings(X),Opts),
               assert(owl2_settings:X)),
        get_time(T1),
	% set of ontologies explicitly to convert
        forall(member(convert(F),Opts),
               load_axioms(F,Fmt,LoadOpts)),
	(   setof(Ont,A^ontologyAxiom(Ont,A),ConvertOnts)
	->  true
	;   ConvertOnts=[]),
	% any other ontologies
        forall(member(rest(F),Opts),
               load_axioms(F,Fmt,LoadOpts)),
        get_time(T2),
        LoadTime is T2-T1,
        debug(bench,'load_time: ~w',[LoadTime]),
        forall(member(goal(G),Opts),
               G),
        (   member(statistics(true),Opts)
        ->  statistics
        ;   true),
        get_time(T3),
        GoalTime is T3-T2,
        debug(bench,'goal_time: ~w',[GoalTime]),

        findall(X,
                (   member(saveopt(X),Opts)
		;   member(Ont,ConvertOnts),
		    X=ontology(Ont)), % save this ontology specifically
                SaveOpts),
	
        (   member(output_format(OutFmt),Opts)
        ->  (   member(output_file(OutFile),Opts)
            ->  save_axioms(OutFile,OutFmt,SaveOpts)
            ;   save_axioms(_,OutFmt,SaveOpts))
        ;   true),
        forall(member(query(T,G),Opts),
               (   forall(G,
                          writeln(result=T)))),
        (   member(qsave(QSF),Opts)
        ->  ensure_loaded(library('thea2/owl2_export_rdf')),
            ensure_loaded(library('thea2/owl2_from_rdf')),
            qsave_program(QSF,
                          [ goal(prolog_shell),
                            emulator('/usr/bin/swipl'),
                            stand_alone(true) ])
        ;   true),
        (   member(prolog(true),Opts)
        ->  prolog_shell
        ;   true).




prolog_shell:-
        format(user_error,'% Starting thea shell~n',[]),
        repeat,
        catch(prolog,
              E,
              (format('ERROR:~n~w~n',[E]),fail)),
        !,
        format('Come back soon!~n').


parse_args([],[]).
parse_args(Args,[Opt|Opts]) :-
        parse_arg(Args,Rest,Opt),
        !,
        parse_args(Rest,Opts).
parse_args([A|Args],[rest(A)|Opts]) :-
        parse_args(Args,Opts).

parse_arg(['--debug',D|L],L,null) :- debug(D).
parse_arg(['--prolog'|L],L,prolog(true)).
parse_arg(['--no_uri_expansion'|L],L,settings(uri_translation(none))).
parse_arg(['--uri_translation',X|L],L,settings(uri_translation(X))).
parse_arg(['--contract',X|L],L,settings(uri_translation(contract(X)))).
parse_arg(['--statistics'|L],L,statistics(true)).
parse_arg(['--import'|L],L,loadopt(imports(true))).
parse_arg(['--save-opt',A|L],L,saveopt(O)) :- atom_to_term(A,O,_).
parse_arg(['--format',A|L],L,loadopt(format(Fmt)))  :- atom_to_term(A,Fmt,_).
parse_arg(['--ensure_loaded',MA|L],L,ensure_loaded(M)) :- atom_to_term(MA,M,_).
%parse_arg(['--ensure_loaded',M|L],L,ensure_loaded(M)).
parse_arg(['--convert',X|L],L,convert(X)).
parse_arg(['--to',Fmt|L],L,output_format(Fmt)).
parse_arg(['--out',File|L],L,output_file(File)).
parse_arg(['--use-labels'|L],L,goal(use_labels_for_IRIs)).
parse_arg(['--use-safe-labels'|L],L,goal(use_safe_labels_for_IRIs)).
parse_arg(['--goal',GA|L],L,goal(G)) :- atom_to_term(GA,G,_).
parse_arg(['--query',GA|L],L,query(T,G)) :- atom_to_term(GA,G-T,_).
parse_arg(['--load-catalog'|L],L,null) :- load_catalog.
parse_arg(['--qsave',File|L],L,qsave(File)).

