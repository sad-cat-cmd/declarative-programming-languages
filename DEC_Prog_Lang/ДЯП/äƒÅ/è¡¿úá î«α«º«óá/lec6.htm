<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0066)http://www.marstu.mari.ru:8101/mmlab/home/prolog/LECTION6/lec6.HTM -->
<HTML><HEAD><TITLE>Логическое и функциональное программирование. Лекция 6</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#800080 aLink=#0000ff link=#800080
bgColor=#c7d4ea><FONT face="Arial Cyr">
<TABLE cellSpacing=0 width="100%" align=center border=0>
  <TBODY>
  <TR><!-- Row 1 -->
    <TD width=10 bgColor=#8181c0>
    <TD vAlign=center align=left width="65%" bgColor=#8181c0><FONT
      color=#c6c6ff size=4><B><I>Лекция 6</I></B></FONT>
    <TD bgColor=#c7d4ea>
    <TD bgColor=#c7d4ea></TD>
  <TR><!-- Row 2 -->
    <TD width=10 bgColor=#a3a3d1><FONT color=#8181c9></FONT>
    <TD vAlign=center align=middle width="65%" bgColor=#a3a3d1 height=20><FONT
      color=#004080 size=5><B><I>Встроенные предикаты. Поиск на Прологе.</I></B>
      </FONT>
    <TD bgColor=#c7d4ea>
    <TD bgColor=#c7d4ea></TD></TR></TBODY></TABLE></FONT>
<CENTER></CENTER>
<H2><FONT face="Arial Cyr" color=#004080>Cодержание</FONT></H2><FONT
face="Arial Cyr">
<DL>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.1">6.1
  Отрицание как неудача. (not as failure).</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.2">6.2
  Алгоритм поиска на Прологе.</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.3">6.3
  Чтение и запись информации с файлов.</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.3.1">6.3.1
  Обработка входных потоков.</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.3.2">6.3.2
  Обработка выходных потоков.</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.4">6.4
  Обработка символов.</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.4.1">6.4.1
  put(X)</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.4.2">6.4.2
  get(X)</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.4.3">6.4.3
  get0(X)</A>
  <DD><IMG src="lec6.files/blueball.gif"> <A
  href="lec6.HTM#L6.5">6.5
  Три предиката ARITY-prologa.</A> </DD></DL></FONT><FONT face="Arial Cyr">
<P>
<CENTER><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT> <FONT color=#000080>
<H2><A name=L6.1>6.1 Отрицание как неудача. (not as failure)</A></H2></FONT>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P></CENTER>Рассмотрим сначала пример.
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><IMG alt="" src="lec6.files/L66.gif" border=0
      SPACE="20"></IMG>
    <TD align=left>Пусть некоторая Мэри любит всех животных.
      <P>Это записывается:
      <P><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>likes(mary,X):-annimal(X).</B><BR></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>Мэри не любит змей:
      <P><B><!--IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG -->likes(mary,X):-snake(X),!,fail.</B>
      <P><BR><FONT color=#800080><B>fail </FONT></B>- специальная цель,
      встроенный предикат,<BR>который всегда терпит неудачу.
      <P></P>
    <TD align=left><IMG alt="" src="lec6.files/L67.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>Графически предикат изображается:<BR>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><IMG alt="" src="lec6.files/L68.gif" border=0
      SPACE="20"></IMG>
      <P></P>
    <TD align=left>Можно записать в виде одного правила, используя
      <DL>
        <DD><A
        href="Дизъюнкция">дизъюнкцию
        целей.</A></DD></DL>
      <P><B><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG -->likes(mary,X):-snake(X),!,fail;<BR>annimal(X).</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Посмотрим другой пример.
<P>Отношение <B>different(X,Y)</B> будет истина,если <B>X</B> и <B>Y
</B>различны. (<FONT color=#800080><B>не сопоставимы</B></FONT>).
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=left colSpan=2><!-- IMG SRC="YELLOW.GIF" ></IMG -->
    <TD
      align=left><B>different(X,X):-!,fail.</B><BR>или<BR><B>different(X,Y):-X=Y,!,fail.<BR>different(X,Y).</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Если <B>X </B>и <B>Y </B><B><FONT
color=#800080>сопоставимы</FONT></B>, то цель <B>different </B>терпит
неудачу.<BR>Иначе <B>X </B>и <B>Y </B>различны, и цель <B>different </B>успешна.
<P>Или в одном предложении
<P><!-- IMG SRC="YELLOW.GIF" ALIGN=LEFT></IMG --><B>different(X,Y):-X=Y,!,fail;true.</B>
<P><BR>Здесь <B>true </B>- встроенный педикат, который всегда истина.
<P>И в том и другом случае более удобно указывать, что отношение истинно, если
цель ложна.<BR>Для этой цели используется предикат <B>not</B>.
<P><B>not(Goal).</B> -истина, если <B>Goal </B>-ложь, и наоборот <B>not(Goal)
</B>ложно, если <B>Goal</B> успешна.<BR>Это можно записать:
<P><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>not(Goal):-Goal,!,fail;true.</B>
<P><BR>Запись аналогична сделанным, поэтому наши примеры можно переписать:
<P><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>likes(mary,X):-annimal(X),not(snake(X)).</B><BR>или<BR><B>different(X,Y):-not(X=Y).</B>
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><FONT color=#800000>
      <H1>!</H1></FONT>
    <TD align=left>Использование <B>not </B>требует осторожности, т.к.
      определяется через
      <DL>
        <DD><A
        href="Сечение">сечение.<BR></A></DD></DL></A></TD></TD>
  <TR></TR></TBODY></TABLE>Рассмотрим пример:
<P><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>r(a).<BR>g(b).<BR>p(X):-not(r(X)).<BR></B>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><IMG alt=""
      src="lec6.files/COMPUT.gif" border=0 SPACE="20"></IMG>
    <TD align=left><B><FONT color=#800000>?-</FONT>g(X),p(X).<BR>yes <BR><FONT
      color=#800000>?-</FONT>p(X),g(X).<BR>no.</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P><FONT color=#000080>
<H2><A name=L6.2>6.2 Алгоритм поиска на Прологе.</A></H2></FONT>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P></CENTER><B>( Логический подход к задаче о фермере,
волке, козе и капусте.)</B>
<P><FONT color=#800080>Задача заключается в следующем:
<P></FONT>Фермер ( <FONT color=#800080><B>Farmer</B> </FONT>), волк ( <FONT
color=#800080><B>Wolf</B></FONT> ), козел ( <FONT
color=#800080><B>Goat</B></FONT> ) и капуста ( <FONT
color=#800080><B>Cabbidge</B></FONT> ) находятся на одном берегу. Надо
перебраться на другой берег на лодке. Лодка перевозит только двоих. Нельзя
оставлять на одном берегу козу и капусту,козу и волка.
<P>
<CENTER><IMG alt="" src="lec6.files/L61.gif" border=0 SPACE="20"></IMG>
<P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2>
    <TD align=left><FONT color=#800000>
      <H1>!</H1></FONT>
    <TD align=left><FONT color=#800080>Главная проблема в формировании
      алгоритма </FONT>- найти эффективное представление структурой данных Лиспа
      информации о задаче.<BR></A></TD></TD>
  <TR></TR></TBODY></TABLE>Процес перевозки может быть представлен
последовательностью состояний. <FONT color=#800080><B>Состояние
</B></FONT>представляется отношением <B>state </B>c 4 аргументами, каждый из
которых отражает размещение обьектов <B>F</B>,<B>W</B>,<B>G</B>,<B>S </B>:
<P>
<TABLE height=20 cellSpacing=0 cellPadding=0 width=550 align=center border=0>
  <TBODY>
  <TR align=middle>
    <TD align=middle width=500 colSpan=4><IMG alt="" src="lec6.files/L62.gif"
      border=0 SPACE="20"></IMG></TD></TR>
  <TR align=middle>
    <TD align=middle width=100 height=20 cellpadding="0" cellspacing="0"
    border="0"><FONT color=#800080 size=-1><B>Farmer</FONT></B>
    <TD align=middle width=200 height=20 cellpadding="0" cellspacing="0"
    border="0"><FONT color=#800080 size=-1><B>Wolf</FONT></B>
    <TD align=middle width=100 height=20 cellpadding="0" cellspacing="0"
    border="0"><FONT color=#800080 size=-1><B>Goat</FONT></B>
    <TD align=middle width=150 height=20 cellpadding="0" cellspacing="0"
    border="0"><FONT color=#800080 size=-1><B>Cabbidge</FONT></B> </B></TD>
    <CENTER></CENTER></TR></TBODY></TABLE>
<P><FONT size=+1><PRE>     state(e, w, e, w) - F</B>,<B>G </B> in east side (<B>e - east</B>);
<B>           F W G C    W</B>,<B>C </B> in west side (<B>w - west</B>).<P>
</P></PRE></FONT>Оставшаяся программа основывается на этих предикатах. В
частности,они используются для реализации <FONT color=#800080>четырех возможных
действий фермера, выраженных в перевозе фермера через реку:
<P></FONT>
<UL><B>
  <LI>самого себя <BR>
  <LI>W<BR>
  <LI>G<BR>
  <LI>C</B><BR>
  <P></P></LI></UL><!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->Предикат <B>opposite </B>(
определена позже ) определяет новое размещение объектов, которые пересекли реку.
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><!-- IMG SRC="YELLOW.GIF"  ></IMG -->
    <TD align=left><B>move(state(X,X,G,C),state(Y,Y,G,C)):-opposite(X,Y). /*
      FARMER + WOLF */<BR>move(state(X,W,X,C),state(Y,W,Y,C)):-opposite(X,Y). /*
      FARMER + GOAT */<BR>move(state(X,W,G,X),state(Y,W,G,Y)):-opposite(X,Y).
      /*FARMER +
      CABBIDGE*/<BR>move(state(X,W,G,C),state(Y,W,G,C)):-opposite(X,Y). /* ONLY
      FARMER */<BR>
      <P></B></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER><IMG alt="" src="lec6.files/L63.gif" border=0 SPACE="20"></IMG></CENTER>
<P>Теперь можно определить предикат <B>opposite</B>, который определяет другую
сторону.
<P><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>opposite(east,west).<BR>opposite(west,east).</B>
<P>Предикат <B>unsafe </B>определен для проверки <FONT color=#800080>двух
опасных состояний:</FONT>
<P>
<UL>
  <LI><B>F </B>находится на противоположном берегу от <B>W</B>,<B>G</B>
  <LI><B>F </B>находится на противоположном берегу от <B>G </B>,<B>C</B>.
  <P></P></LI></UL>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><IMG alt="" src="lec6.files/L64.gif" border=0
      SPACE="20"></IMG>
    <TD align=left><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>unsafe(
      state(F,X,X,_) ):- opposite(F,X). <BR>/* The wolf eats the goat */</B>
    </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><!-- IMG SRC="YELLOW.GIF"  ALIGN=LEFT></IMG --><B>unsafe(
      state(F,_,X,X) ):- opposite(F,X). <BR>/* The goat eats the cabbage */</B>
    <TD align=left><IMG alt="" src="lec6.files/L65.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE><B>path </B>теперь определяется:
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><!-- IMG SRC="YELLOW.GIF"  ></IMG -->
    <TD align=left><B><FONT size=+1><PRE>   path(S,G,L,L1):-
         move(S,S1),
         not( unsafe(S1) ),
         not( member(S1,L) ),
         path( S1,G,[S1|L],L1),!.
   path(G,G,T,T):-!.   /* The final state is reached  */</B><P></P></PRE></FONT></A></TD></TD>
  <TR></TR></TBODY></TABLE>Для решения можно использовать:
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><!-- IMG SRC="YELLOW.GIF"  ></IMG -->
    <TD align=left><B><FONT size=+1><PRE>   go:-  go(state(east,east,east,east),state(west,west,west,west)).

   go(S,G):-
        path(S,G,[S],L),
        nl,write('A solution is:'),nl,
        write_path(L),
        fail.
   go(_,_).</PRE>
      <P></B></FONT></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Для организации удобной формы вывода использованы <FONT
color=#800080>следующие процедуры:
<P></FONT>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><!-- IMG SRC="YELLOW.GIF"  ></IMG -->
    <TD align=left><B>member(X,[X|_]).<BR>member(X,[_|L]):-member(X,L).
      <P><FONT size=+1><PRE>   write_move( state(X,W,G,C), state(Y,W,G,C) ) :-!,
           write('The farmer crosses the river from '),
           write(X),
           write(' to '),
           write(Y),nl.
   write_move( state(X,X,G,C), state(Y,Y,G,C) ) :-!,
           write('The farmer takes the Wolf from '),
           write(X),
           write(' of the river to '),
           write(Y),nl.
   write_move( state(X,W,X,C), state(Y,W,Y,C) ) :-!,
           write('The farmer takes the Goat from' ),
           write(X),
           write(' of the river to '),
           write(Y),nl.
   write_move( state(X,W,G,X), state(Y,W,G,Y) ) :-!,
           write('The farmer takes the cabbage from '),
           write(X),
           write(' of the river to '),
           write(Y),nl.
		
   write_path( [H1,H2|T] ) :- !,
           write_move(H1,H2),write_path([H2|T]).
   write_path( _ ).</PRE>
      <P></B></FONT></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Сама программа намного короче программы на лиспе.
<P>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P><FONT color=#000080>
<H2><A name=L6.3>6.3 Чтение и запись информации с файлов.</A></H2></FONT>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P></CENTER>При вводе и выводе информации в прологе
используется понятие <FONT color=#800080><B>потоков</B></FONT>.<BR>Файлы для
чтения - это <FONT color=#800080><B>входные потоки</B></FONT>.<BR>Файлы для
записи - это <FONT color=#800080><B>выходные потоки</B></FONT>.
<P>Для пользователя определены <FONT color=#000080>два потока:
<P></FONT>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>информация вводимая с клавиатуры - <FONT
      color=#800080><B>входной поток</B></FONT>.
    <TD align=left><IMG alt="" src="lec6.files/L69.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><IMG alt="" src="lec6.files/L610.gif" border=0
      SPACE="20"></IMG>
    <TD align=left>информация выводимая на монитор - <FONT
      color=#800080><B>выходной поток</B></FONT>.
      <UL></UL></A></TD></TD>
  <TR></TR></TBODY></TABLE>
<P>Эти потоки являются <FONT color=#800080><B>псевдофайлами</B></FONT> с именем
<B>user</B>.
<P>
<CENTER><IMG alt="" src="lec6.files/L611.gif" border=0
SPACE="20"></IMG></CENTER>
<P>В каждый момент времени для пролога активны <FONT color=#800080><B>два
файла:</B>
<P></FONT>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><B>для ввода </B>-<FONT color=#800080> текущий входной
      поток</FONT>.
    <TD align=left><IMG alt="" src="lec6.files/L612.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><IMG alt="" src="lec6.files/L613.gif" border=0
      SPACE="20"></IMG>
    <TD align=left><B>для вывода </B>- <FONT color=#800080>текущий выходной
      поток</FONT>. </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<P>По умолчанию эти потоки - пользовательский терминал <B>user</B>.
<P>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P><FONT color=#000080>
<H3><A name=L6.3.1>6.3.1 Обработка входных потоков.</A></H3></FONT>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>Входные потоки пролог <FONT
color=#800080><B>"видит".</FONT>
      <P></B>Поэтому определены следующие предикаты:
      <P>
      <UL>
        <LI><B>see(F) </B>- открывает файл <B>F</B>, например 'a.dat' и он
        становится текущим входным потоком.
        <LI><B>seeing(F)</B> - связывает <B>F</B> с именем файла, являющегося
        текущим входным потоком.
        <LI><B>seen </B>- закрывает текущий входной поток и связывает его с
        <B>user</B>.
        <P></P></LI></UL>
    <TD align=left><IMG alt="" src="lec6.files/L614.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><A
      href="file:///C:/WINDOWS/PPO/ANI/SEE.FLC"><IMG alt=""
      src="lec6.files/ANI.gif" border=0 SPACE="20"></IMG> </A>
    <TD align=left>Иллюстрация <B>SEE</B>
    <TD align=left><IMG alt="" src="lec6.files/S_SEE.gif" border=0
      SPACE="20"></IMG></A>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><A
      href="file:///C:/WINDOWS/PPO/ANI/SEEN.FLC"><IMG alt=""
      src="lec6.files/ANI.gif" border=0 SPACE="20"></IMG> </A>
    <TD align=left>Иллюстрация <B>SEEN</B>
    <TD align=left><IMG alt="" src="lec6.files/S_SEEN.gif" border=0
      SPACE="20"></IMG></A>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Примеры:
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><!-- IMG SRC="YELLOW.GIF"  ></IMG -->
    <TD align=left><B>p1:-see('a.dat'),read(X),write(X),seen.
      <P>p2:-see('a.dat'),seeing(F),write(F),seen,<BR>read(A),write(A).</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P><FONT color=#000080>
<H3><A name=L6.3.2>6.3.2 Обработка выходных потоков.</A></H3></FONT>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>В выходные потоки пролог <FONT
      color=#800080><B>"говорит"</B></FONT>.
      <P>
      <UL>
        <LI><B>tell(F)</B> - открывает файл<B> F </B>как текущий выходной поток.
        Если файла нет, то создает его.
        <LI><B>telling(F)</B>- связывает <B>F</B> с именем файла, являющегося
        текущим выходным потоком.
        <LI><B>told </B>- закрывает файл, являющиийся текущим выходным потоком.
        Текущим выходным потоком становится <B>user</B>.
        <P></P></LI></UL>
    <TD align=left><IMG alt="" src="lec6.files/L615.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>Пример:
<P><!-- IMG SRC="YELLOW.GIF" ALIGN=LEFT ></IMG --><B>p3:-
tell('a.dat'),write(a),told,write(a).</B>
<P><BR>
<P>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P><FONT color=#000080>
<H2><A name=L6.4>6.4 Обработка символов.</A></H2></FONT>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P></CENTER>Пролог имеет несколько предикатов для обработки
символов.
<P>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P><FONT color=#000080>
<H3><A name=L6.4.1>6.4.1 put(X)</A></H3></FONT>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P></CENTER>Символы записываются в текущий выходной поток
при помощи предиката <B>put(C)</B>, где <BR><B>C</B> - символ, который нужно
вывести, представленный в кодировке ASCII <I>( число от 0 до 127).</I>
<P>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><A
      href="file:///C:/WINDOWS/PPO/ANI/PUT11.FLC"><IMG alt=""
      src="lec6.files/ANI.gif" border=0 SPACE="20"></IMG> </A>
    <TD align=left>Иллюстрация PUT
    <TD align=left><IMG alt="" src="lec6.files/S_PUT11.gif" border=0
      SPACE="20"></IMG></A>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Пример:
<P><!-- IMG SRC="YELLOW.GIF" ALIGN=LEFT ></IMG --><B>p4:-put(65),put(66),put(67).</B>

<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><IMG alt=""
      src="lec6.files/COMPUT.gif" border=0 SPACE="20"></IMG>
    <TD align=left><B><FONT color=#800000>?-</FONT>p4.<BR>ABC</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P><FONT color=#000080>
<H3><A name=L6.4.2>6.4.2 get(X)</A></H3></FONT>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>Печатный символ <I>(код по ASCII больше 31)</I> читается
      предикатом <B>get(X)</B>. Аргумент<B> X </B>принимает числовое значение.
      Непечатный символ игнорируется.
      <P></P>
    <TD align=left><IMG alt="" src="lec6.files/L616.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P><FONT color=#000080>
<H3><A name=L6.4.3>6.4.3 get0(X)</A></H3></FONT>
<P><FONT face="Arial Cyr"><IMG height=5 src="lec6.files/saqual.gif"
width="70%"></FONT></P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>Читает любой <I>(печатный или нет)</I> символ.
      <P></P>
    <TD align=left><IMG alt="" src="lec6.files/L617.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<CENTER>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P><FONT color=#000080>
<H2><A name=L6.5>6.5 Три предиката ARITY-prologa.</A></H2></FONT>
<P><FONT face="Arial Cyr"><IMG height=8 src="lec6.files/saqual.gif"
width="90%"></FONT></P></CENTER>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left>Два предиката ARITY-prologa для работы с кусором.
      <P>
      <UL>
        <LI><B>tget(Y,X) </B>Выдает текущие координаты курсора.
        <P></P>
        <LI><B>tmove(Y,X) </B>Перемещает курсор в заданные позиции.
        <P></P></LI></UL>
    <TD align=left><IMG alt="" src="lec6.files/L618.gif" border=0
      SPACE="20"></IMG> </A></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=middle colSpan=2><A
      href="file:///C:/WINDOWS/PPO/ANI/TMOVE11.FLC"><IMG alt=""
      src="lec6.files/ANI.gif" border=0 SPACE="20"></IMG> </A>
    <TD align=left>Иллюстрация TMOVE
    <TD align=left><IMG alt="" src="lec6.files/S_TMOVE1.gif" border=0
      SPACE="20"></IMG></A>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Пример:
<P><!-- IMG SRC="YELLOW.GIF" ALIGN=LEFT ></IMG --><B>p5:-write('+++++'),tget(Y,X),X1
is X-4,tmove(Y,X1),<BR>write('***').</B>
<P><BR>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle colSpan=2><IMG alt=""
      src="lec6.files/COMPUT.gif" border=0 SPACE="20"></IMG>
    <TD align=left><B><FONT color=#800000>?-</FONT>p5.<BR>+***+</B>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>
<TABLE width=600 border=0>
  <TBODY>
  <TR>
    <TD align=left><A href="file:///C:/WINDOWS/PPO/ANI/TMOVE21.FLC"><IMG
      alt="" src="lec6.files/ANI.gif" border=0 SPACE="20"></IMG> </A>
    <TD align=left>Иллюстрация примера
    <TD align=left><IMG alt="" src="lec6.files/S_TMOVE1.gif" border=0
      SPACE="20"></IMG></A>
      <P></A></P></TD></TD>
  <TR></TR></TBODY></TABLE>Еще один полезный предикат: <B>cls</B>.<BR>Он, как
можно догадаться, очищает экран.
<P></FONT></FONT></B></B></FONT>
<CENTER>
<P>
<HR align=left width="75%" noShade SIZE=1>
 </BODY></HTML>